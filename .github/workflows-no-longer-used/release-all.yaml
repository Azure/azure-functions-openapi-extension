name: Release NuGet

on:
  push:
    branches:
    - release/appsettings-*
    - release/swagger-*
    - release/swaggercore-*

jobs:
  build_test_package_release:
    name: Build, test, package and release
    strategy:
      matrix:
        os: [ 'windows-latest' ]

    runs-on: ${{ matrix.os }}

    steps:
    # - name: Check event payload
    #   shell: pwsh
    #   run: |
    #     echo ${{ toJSON(github.event) }}

    - name: Set release module and version
      id: release
      shell: pwsh
      run: |
        $branch = "${{ github.event.ref }}" -replace "refs/heads/release/", ""
        $segments = $branch -split "-"
        $module = $segments[0]
        $version = $segments[1]

        # echo "::set-env name=RELEASE_MODULE::$module"
        # echo "::set-env name=RELEASE_VERSION::$version"

        echo "::set-output name=module::$module"
        echo "::set-output name=version::$version"

    - name: Check release module and version
      shell: pwsh
      run: |
        # echo "env: $env:RELEASE_MODULE"
        # echo "env: $env:RELEASE_VERSION"

        echo "output: ${{ steps.release.outputs.module }}"
        echo "output: ${{ steps.release.outputs.version }}"

    - name: Checkout the repository
      uses: actions/checkout@v2

    # - name: Setup .NET SDK
    #   uses: actions/setup-dotnet@v1
    #   with:
    #     dotnet-version: ${{ matrix.dotnet }}

    - name: Setup .NET SDK 2.1 LTS
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '2.1.x'

    - name: Setup .NET SDK 3.1 LTS
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'

    # - name: Add MSBuild to PATH
    #   uses: microsoft/setup-msbuild@v1.0.0

    - name: Restore NuGet packages
      shell: pwsh
      run: |
        dir
        dotnet restore .

    - name: Build solution for AppSettings
      if: steps.release.outputs.module == 'appsettings'
      shell: pwsh
      run: |
        dir
        dotnet build ./src/Microsoft.Azure.WebJobs.Extensions.OpenApi.AppSettings -c Release -p:Version=${{ steps.release.outputs.version }} -v minimal
        dotnet build ./test/Microsoft.Azure.WebJobs.Extensions.OpenApi.AppSettings.Tests -c Release

    - name: Build solution for OpenApi Core
      if: steps.release.outputs.module == 'swaggercore'
      shell: pwsh
      run: |
        dir
        dotnet build ./src/Microsoft.Azure.WebJobs.Extensions.OpenApi.Core -c Release -p:Version=${{ steps.release.outputs.version }} -v minimal
        dotnet build ./test/Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Tests -c Release

    - name: Build solution for OpenApi
      if: steps.release.outputs.module == 'swagger'
      shell: pwsh
      run: |
        dir
        dotnet build ./src/Microsoft.Azure.WebJobs.Extensions.OpenApi -c Release -p:Version=${{ steps.release.outputs.version }} -v minimal
        dotnet build ./test/Microsoft.Azure.WebJobs.Extensions.OpenApi.Tests -c Release

    - name: Test solution for AppSettings
      if: steps.release.outputs.module == 'appsettings'
      shell: pwsh
      run: |
        dir
        dotnet test ./test/Microsoft.Azure.WebJobs.Extensions.OpenApi.AppSettings.Tests -c Release

    - name: Test solution for OpenApi Core
      if: steps.release.outputs.module == 'swaggercore'
      shell: pwsh
      run: |
        dir
        dotnet test ./test/Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Tests -c Release

    - name: Test solution for OpenApi
      if: steps.release.outputs.module == 'swagger'
      shell: pwsh
      run: |
        dir
        dotnet test ./test/Microsoft.Azure.WebJobs.Extensions.OpenApi.Tests -c Release

    - name: List Package for AppSettings
      if: steps.release.outputs.module == 'appsettings'
      shell: pwsh
      run: |
        $package = Get-ChildItem -Path ./src/*.AppSettings -Include *.nupkg -Recurse | Where-Object { $_.FullName -like "*${{ steps.release.outputs.version }}*" }
        $path = $package[0].FullName
        $name = $package[0].Name

        echo "::set-env name=PACKAGE_PATH::$path"
        echo "::set-env name=PACKAGE_NAME::$name"

    - name: List Package for OpenApi Core
      if: steps.release.outputs.module == 'swaggercore'
      shell: pwsh
      run: |
        $package = Get-ChildItem -Path ./src/*.OpenApi.Core -Include *.nupkg -Recurse | Where-Object { $_.FullName -like "*${{ steps.release.outputs.version }}*" }
        $path = $package[0].FullName
        $name = $package[0].Name

        echo "::set-env name=PACKAGE_PATH::$path"
        echo "::set-env name=PACKAGE_NAME::$name"

    - name: List Package for OpenApi
      if: steps.release.outputs.module == 'swagger'
      shell: pwsh
      run: |
        $package = Get-ChildItem -Path ./src/*.OpenApi -Include *.nupkg -Recurse | Where-Object { $_.FullName -like "*${{ steps.release.outputs.version }}*" }
        $path = $package[0].FullName
        $name = $package[0].Name

        echo "::set-env name=PACKAGE_PATH::$path"
        echo "::set-env name=PACKAGE_NAME::$name"

    - name: Check package path and name
      id: package
      shell: pwsh
      run: |
        echo "package-path: $env:PACKAGE_PATH"
        echo "package-name: $env:PACKAGE_NAME"

        echo "::set-output name=path::$env:PACKAGE_PATH"
        echo "::set-output name=name::$env:PACKAGE_NAME"

    - name: Create Release to GitHub
      id: ghrelease
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "${{ steps.release.outputs.module }}-${{ steps.release.outputs.version }}"
        release_name: Release "${{ steps.release.outputs.module }}-v${{ steps.release.outputs.version }}"
        draft: false
        prerelease: false

    - name: Upload NuGet package to GitHub
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.ghrelease.outputs.upload_url }}
        asset_path: ${{ steps.package.outputs.path }}
        asset_name: ${{ steps.package.outputs.name }}
        asset_content_type: application/octet-stream

    - name: Release to NuGet
      shell: pwsh
      run: |
        dotnet nuget push ${{ steps.package.outputs.path }} --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}
